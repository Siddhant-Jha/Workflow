name: Multi-Branch Commit Revert

on: workflow_dispatch: inputs: commit_sha: description: "Commit SHA to find and revert" required: true target_branches: description: "Comma-separated list of branches to revert on (leave blank to only scan)" required: false default: ""

permissions: contents: write pull-requests: write

jobs: scan_commit: runs-on: ubuntu-latest outputs: dev_contains: ${{ steps.scan.outputs.dev_found }} qa_contains: ${{ steps.scan.outputs.qa_found }} stg_contains: ${{ steps.scan.outputs.stg_found }} prod_contains: ${{ steps.scan.outputs.prod_found }} steps: - name: Checkout code uses: actions/checkout@v3 with: fetch-depth: 0

- name: Find commit in environment branches
    id: scan
    run: |
      set -e
      commit="${{ github.event.inputs.commit_sha }}"
      git fetch origin dev:origin/dev qa:origin/qa stg:origin/stg prod:origin/prod

      echo "dev_found=false" >> $GITHUB_OUTPUT
      echo "qa_found=false" >> $GITHUB_OUTPUT
      echo "stg_found=false" >> $GITHUB_OUTPUT
      echo "prod_found=false" >> $GITHUB_OUTPUT

      for branch in dev qa stg prod; do
        if git merge-base --is-ancestor "$commit" "origin/$branch"; then
          echo "${branch}_found=true" >> $GITHUB_OUTPUT
        fi
      done

revert_commit: needs: scan_commit runs-on: ubuntu-latest if: ${{ github.event.inputs.target_branches != '' }} steps: - name: Checkout repository uses: actions/checkout@v3 with: fetch-depth: 0

- name: Configure Git user
    run: |
      git config user.name "GitHub Actions"
      git config user.email "actions@github.com"

  - name: Revert commit on branches
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    run: |
      set -e
      commit="${{ github.event.inputs.commit_sha }}"
      branches="${{ github.event.inputs.target_branches }}"
      short_sha="${commit::7}"

      IFS=',' read -ra TARGETS <<< "$branches"
      for branch in "${TARGETS[@]}"; do
        branch="$(echo -n "$branch" | xargs)"
        echo "Processing branch '$branch'..."

        case "$branch" in
          dev)  found=${{ needs.scan_commit.outputs.dev_contains }} ;;
          qa)   found=${{ needs.scan_commit.outputs.qa_contains }} ;;
          stg)  found=${{ needs.scan_commit.outputs.stg_contains }} ;;
          prod) found=${{ needs.scan_commit.outputs.prod_contains }} ;;
          *)    found="false" ;;
        esac
        if [ "$found" != "true" ]; then
          echo "Skipping: Commit not found in $branch"
          continue
        fi

        git fetch origin "$branch"
        git switch -c "revert-${short_sha}-${branch}" "origin/$branch"

        if git revert --no-edit "$commit"; then
          echo "✅ Revert successful on $branch"
        else
          echo "⚠️ Revert caused conflicts on $branch"
          git add .
          git commit -m "Partial revert of $commit with conflicts (manual resolution needed)"
        fi

        git push origin "HEAD:revert-${short_sha}-${branch}"

        gh pr create -B "$branch" -H "revert-${short_sha}-${branch}" \
          --title "Revert commit $short_sha from $branch" \
          --body "This pull request attempts to revert commit $commit from the **$branch** branch.\n\n⚠️ **Merge conflicts detected. Manual resolution required.**"

        gh pr edit "revert-${short_sha}-${branch}" --add-label "needs-manual-revert" || echo "Could not add label. Ensure it exists."

